using namespace std;
float _angle = 0;
float i;
int k =0;
GLUquadric *quadric = gluNewQuadric();
float pecaPretaX[12]={0.75,2.26,3.75,5.25,6.75,8.25,9.75,11.25,0.75,3.75,6.75,9.75};
float pecaPretaY[12]={-11.3,-9.75,-11.3,-9.75,-11.3,-9.75,-11.3,-9.75,-8.25,-8.25,-8.25,-8.25};
float pecaBrancaX[12]={2.26,0.75,5.25,3.75,8.25,6.75,11.25,9.75,2.26,5.25,8.25,11.25};
float pecaBrancaY[12]={-0.75,-2.25,-.75,-2.25,-0.75,-2.25,-0.75,-2.25,-3.75,-3.75,-3.75,-3.75};
void menu(void);
void opcao_menu(int escolha);
bool luzes = true;
bool luz1 = true;
bool luz2 = true;
bool top = false;
bool right = true;
bool left = false;
float cont =0;
bool spotlightChange = false;


GLfloat light_position1[]={ 0.0, 80.0, -20.0, 1.0 };
GLfloat spot_direction[]={ 0.0, -1.0, 0.0 };
GLfloat light_ambient[]={ 1.0, 1.0, 1.0, 1.0 };
GLfloat light_diffuse[]={ 1.0, 1.0, 1.0, 1.0 };

float difusa[] = { 0.98, 0.92, 0.84, 1.0  };
float difusa1[] = { 0.49, 0.19, 0.0, -1.0  };
float difusa2[] = { 0.97, 0.98, 0.92, 1.0 };
float difusa3[] = { 0.09, 0.15, 0.1, 1.0 };


//tabuleiro
GLuint _displayListId_blackArea; //The OpenGL id of the display list
GLuint _displayListId_whiteArea; //The OpenGL id of the display list

//peÁas
GLuint _displayListId_blackPieces;
GLuint _displayListId_whitePieces;



float cameraAngle = 0.0f;


void handleKeypress(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 27:
            exit(0);
    }
}

void handleResize(int w, int h)
{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if(top){
        glOrtho(-15,15,-10,10,-20,20);
        cont=1;
    }else if(right){
        gluPerspective(45.0, (double)w / (double)h, 1.0, 200);
        cont=1;
    }else if(left){
        gluPerspective(45.0, (double)w / (double)h, 1.0, 200);
        cont=-1;
    }
    GLfloat light_position[]={ 0.0, 80.0, -100.0, cont };
   
    
    
    glMatrixMode(GL_MODELVIEW);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
    //glEnable(GL_BLEND);
    
    glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
    
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 4);
    
    glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, spot_direction);
    glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, 45.0);
    glLightfv(GL_LIGHT1, GL_POSITION, light_position1);
    if(spotlightChange){
        GLfloat light_diffuse1[]={0.5,0.6,0.2,1.0};
        glLightfv(GL_LIGHT1, GL_DIFFUSE, light_diffuse1);
    }else{
        glLightfv(GL_LIGHT1, GL_DIFFUSE, light_diffuse);
    }
    glLightf(GL_LIGHT1, GL_CONSTANT_ATTENUATION, 3);
    
    
    menu();
    glutPostRedisplay();
}


void menu(void)
{
    int aux, aux1, aux2;
    
    aux1=glutCreateMenu(opcao_menu);       // Sub-menu
    glutAddMenuEntry("Ambient  ", 4);
    glutAddMenuEntry("Spot  ", 5);
    glutAddMenuEntry("All lights  ", 6);
    
    aux=glutCreateMenu(opcao_menu);       // Sub-menu
    glutAddMenuEntry("Right  ", 1);
    glutAddMenuEntry("Top  ", 2);
    glutAddMenuEntry("Left ", 3);
    
    glutCreateMenu(opcao_menu);          // Menu principal
    glutAddSubMenu("Camera   ", aux);
    glutAddSubMenu("Light   ", aux1);
    glutAddMenuEntry("Change Spotlight", 7);
    glutAddMenuEntry("Sair  ", 9);
    glutAttachMenu(GLUT_RIGHT_BUTTON);   // Qual o bot„o do rato associado ao menu
    
}

void opcao_menu(int escolha)
{
    switch (escolha)
    {
        case 1:
            top=false;
            left=false;
            right=true;
            handleResize(1440, 900);
            glutPostRedisplay();
            break;
            
        case 2:
            right=false;
            left=false;
            top=true;
            handleResize(1440, 900);
            glutPostRedisplay();
            break;
            
        case 3:
            right=false;
            top=false;
            left=true;
            handleResize(1440, 900);
            glutPostRedisplay();
            break;
            
        case 4:if(luz1){glDisable(GL_LIGHT0);
            glutPostRedisplay();
            luz1=!luz1;}
        else{
            glEnable(GL_LIGHT0);
            glutPostRedisplay();
            luz1=!luz1;
        }
            break;
            
        case 5:if(luz2){glDisable(GL_LIGHT1);
            glutPostRedisplay();
            luz2=!luz2;}
        else{
            glEnable(GL_LIGHT1);
            glutPostRedisplay();
            luz2=!luz2;
        }
            break;
            
        case 6:if(luzes){
            glDisable(GL_LIGHTING);
            glutPostRedisplay();
            luzes=!luzes;}
        else{
            glEnable(GL_LIGHTING);
            glutPostRedisplay();
            luzes=!luzes;
        }
            break;
        case 7:spotlightChange=!spotlightChange;
            handleResize(1440, 900);
            break;
            
            
        case 9:exit(EXIT_SUCCESS);
    }
}


void draw_BlackArea()
{
    // glPushMatrix();
    //glTranslatef(1.5f,0.0f,0.0f);
    
    glMaterialfv(GL_FRONT, GL_DIFFUSE, difusa1);
    glMaterialfv(GL_FRONT, GL_AMBIENT, difusa1);
    glMaterialfv(GL_FRONT, GL_SPECULAR, difusa1);
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glTranslatef(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(1.50f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.3f, 0.0f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glEnd();
    
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(1.5f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.0f, -1.5f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(1.5f, 0.3f, 0.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glVertex3f(1.50f, 0.0f, -1.5f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(1.50f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.0f, -1.5f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glVertex3f(1.50f, 0.3f, 0.0f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glEnd();
    //    glPopMatrix();
    
}
void draw_whiteArea()
{
    // glPushMatrix();
    glMaterialfv(GL_FRONT, GL_DIFFUSE, difusa);
    glMaterialfv(GL_FRONT, GL_AMBIENT, difusa);
    glMaterialfv(GL_FRONT, GL_SPECULAR, difusa);
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glTranslatef(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(1.50f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.3f, 0.0f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(1.5f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.0f, -1.5f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(1.5f, 0.3f, 0.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glVertex3f(1.50f, 0.0f, -1.5f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(0.05f, 0.05f, 0.05f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(1.50f, 0.0f, 0.0f);
    glVertex3f(1.5f, 0.0f, -1.5f);
    glVertex3f(0.0f, 0.0f, -1.5f);
    glEnd();
    
    
    glBegin(GL_QUADS);
    //glColor3f(1.0f, 1.0f, 1.0f);
    glVertex3f(0.0f, 0.3f, 0.0f);
    glVertex3f(1.50f, 0.3f, 0.0f);
    glVertex3f(1.5f, 0.3f, -1.5f);
    glVertex3f(0.0f, 0.3f, -1.5f);
    glEnd();
    // glPopMatrix();
    
}


void initRendering()
{
    glEnable(GL_DEPTH_TEST);
    //glEnable(GL_COLOR_MATERIAL);
    glClearColor(0.0f, 0.0f, 0.2f, 1.0f);
    //Set up a display list for drawing a cube
    _displayListId_blackArea = glGenLists(1); //Make room for the display list
    glNewList(_displayListId_blackArea, GL_COMPILE); //Begin the display list
    draw_BlackArea(); //Add commands for drawing a black area to the display list
    glEndList(); //End the display list
    
    //Set up a display list for drawing a cube
    _displayListId_whiteArea = glGenLists(2); //Make room for the display list
    glNewList(_displayListId_whiteArea, GL_COMPILE); //Begin the display list
    draw_whiteArea(); //Add commands for drawing a black to the display list
    glEndList(); //End the display list
}
void drawPeça(float x, float z, bool color){
    glPushMatrix();
    glTranslatef(x, 0.6, z);
    glRotatef(90, 1, 0 , 0);
    if (color == true){
        //glColor3f(0.1f,0.1f,0.1f);
        glMaterialfv(GL_FRONT, GL_DIFFUSE, difusa3);
        glMaterialfv(GL_FRONT, GL_AMBIENT, difusa3);
        glMaterialfv(GL_FRONT, GL_SPECULAR, difusa3);
        gluCylinder(quadric, 0.6, 0.6, 0.3, 20, 20);
        glRotatef(180, 1, 0, 0);
        //glColor3f(0.2f,0.2f,0.2f);
        gluDisk(quadric, 0, 0.6, 20, 1);
    }
    if (color == false){
        //glColor3f(0.9f,0.9f,0.9f);
        glMaterialfv(GL_FRONT, GL_DIFFUSE, difusa2);
        glMaterialfv(GL_FRONT, GL_AMBIENT, difusa2);
        glMaterialfv(GL_FRONT, GL_SPECULAR, difusa2);
        gluCylinder(quadric, 0.6, 0.6, 0.3, 20, 20);
        glRotatef(180, 1, 0, 0);
        //glColor3f(0.8f,0.8f,0.8f);
        gluDisk(quadric, 0, 0.6, 20, 1);
    }
    
    
    glPopMatrix();
}

void drawScene()
{
    glPushMatrix();
    glLoadIdentity();
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    
    
    //insert code down
    
    if(right){
        gluLookAt(0.0f, -15.0f, 7.0f,
                  0.0f, 0.0f, 0.0f,
                  0.0f, 1.0f, 0.0f);
    }
    
    if(left){
        gluLookAt(0.0f, 15.0f, 7.0f,
                  0.0f, 0.0f, 0.0f,
                  0.0f, -1.0f, 0.0f);
    }
    
    
    
    
    glRotatef(90.0f, 90.0f, 0.0f, 0.0f);
    glTranslatef(-4 * 1.5, 0.0, 4 * 1.5);
    
    for (float j = 0.0; j>(-8 * 1.5); j -= 1.5)
    {
        k++;
        for (i = 0.0; i<(4 * 3.0); i += 3.0)
        {
            if (k % 2 == 0)
            {
                glPushMatrix();
                glTranslatef(i, 0.0, j);
                glCallList(_displayListId_blackArea);
                glPopMatrix();
                
            }
            else
            {
                glPushMatrix();
                glTranslatef(i + 1.5, 0.0, j);
                glCallList(_displayListId_blackArea);
                glPopMatrix();
                
            }
        }
    }
    for (float j = 0.0; j>(-8 * 1.5); j -= 1.5)
    {
        k++;
        for (i = 0.0; i<(4 * 3.0); i += 3.0)
        {
            if (k % 2 != 0)
            {
                glPushMatrix();
                glTranslatef(i, 0.0, j);
                glCallList(_displayListId_whiteArea);
                glPopMatrix();
                
            }
            else
            {
                glPushMatrix();
                glTranslatef(i + 1.5, 0.0, j);
                glCallList(_displayListId_whiteArea);
                glPopMatrix();
                
            }
        }
    }
    //desenhar peças:
    for (int i = 0; i < 12; i++){
        drawPeça(pecaPretaX[i] , pecaPretaY[i], true);
    }
    for (int i = 0; i < 12; i++){
        drawPeça(pecaBrancaX[i] , pecaBrancaY[i], false);
    }
    glutSwapBuffers();
    
    
    glPopMatrix();
    
    //glutPostRedisplay();
}
void update(int value) {
    _angle += 1.0f;
    if (_angle > 360) {
        _angle -= 360;
    }
    glutPostRedisplay();
    glutTimerFunc(25, update, 0);
}
int main(int argc, char** argv)
{
    
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 800);
    
    gluQuadricDrawStyle(quadric, GLU_FILL);
    gluQuadricOrientation(quadric, GLU_INSIDE);
    glutCreateWindow("basic shape");
    initRendering();
    glutFullScreen();
    
    
    
    glutDisplayFunc(drawScene);
    glutKeyboardFunc(handleKeypress);
    glutReshapeFunc(handleResize);
    //glutTimerFunc(25, update, 0);
    
    glutMainLoop();
    
    return 0;
    
}
